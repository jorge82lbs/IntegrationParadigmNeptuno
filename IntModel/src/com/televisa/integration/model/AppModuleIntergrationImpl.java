package com.televisa.integration.model;

import com.televisa.integration.model.types.EvetvIntCronConfigTabRowBean;
import com.televisa.integration.model.types.EvetvIntServicesParamTabBean;
import com.televisa.integration.model.types.EvetvIntXmlFilesRowBean;

import java.sql.Blob;
import java.sql.Date;
import java.sql.Timestamp;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 06 20:29:01 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleIntergrationImpl extends ApplicationModuleImpl {
    
    /**
     * Obtiene la session de un atributo especificado
     * @autor Jorge Luis Bautista Santiago  
     * @param psAttributte
     * @return String
     */
    public String getValueSessionFromAttribute(String psAttributte){        
       String lsAtributte = "";
       Map sessionScope = ADFContext.getCurrent().getSessionScope();
       lsAtributte = (String)sessionScope.get(psAttributte);
       return lsAtributte;
    }
    
    /**
     * Obtiene fecha actual en java.sql.Date
     * @autor Jorge Luis Bautista Santiago  
     * @return Date
     */
    public Date getCurrentDate(){
        Calendar         loCalendar = Calendar.getInstance();
        java.util.Date loUtilDate = loCalendar.getTime();        
        Date   ldSqlDate = new java.sql.Date(loUtilDate.getTime());
        return ldSqlDate;
    }
    
    /**
     * Obtiene fecha actual en java.sql.Timestamp
     * @autor Jorge Luis Bautista Santiago  
     * @return Timestamp
     */
    public Timestamp getCurrentTimestamp(){
        Timestamp ltTimestamp = new Timestamp(System.currentTimeMillis());
        return ltTimestamp;
    }
    
    
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleIntergrationImpl() {
    }

    /**
     * Container's getter for EvetvIntConfigParamTabView1.
     * @return EvetvIntConfigParamTabView1
     */
    public EvetvIntConfigParamTabViewImpl getEvetvIntConfigParamTabView1() {
        return (EvetvIntConfigParamTabViewImpl) findViewObject("EvetvIntConfigParamTabView1");
    }

    /**
     * Container's getter for EvetvIntCronConfigTabView1.
     * @return EvetvIntCronConfigTabView1
     */
    public EvetvIntCronConfigTabViewImpl getEvetvIntCronConfigTabView1() {
        return (EvetvIntCronConfigTabViewImpl) findViewObject("EvetvIntCronConfigTabView1");
    }

    /**
     * Container's getter for EvetvIntNotificationsTabView1.
     * @return EvetvIntNotificationsTabView1
     */
    public EvetvIntNotificationsTabViewImpl getEvetvIntNotificationsTabView1() {
        return (EvetvIntNotificationsTabViewImpl) findViewObject("EvetvIntNotificationsTabView1");
    }

    /**
     * Container's getter for EvetvIntServicesCatTabView1.
     * @return EvetvIntServicesCatTabView1
     */
    public EvetvIntServicesCatTabViewImpl getEvetvIntServicesCatTabView1() {
        return (EvetvIntServicesCatTabViewImpl) findViewObject("EvetvIntServicesCatTabView1");
    }

    /**
     * Container's getter for EvetvIntServicesLogVwView1.
     * @return EvetvIntServicesLogVwView1
     */
    public ViewObjectImpl getEvetvIntServicesLogVwView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntServicesLogVwView1");
    }

    /**
     * Container's getter for EvetvIntServicesParamsTabView1.
     * @return EvetvIntServicesParamsTabView1
     */
    public EvetvIntServicesParamsTabViewImpl getEvetvIntServicesParamsTabView1() {
        return (EvetvIntServicesParamsTabViewImpl) findViewObject("EvetvIntServicesParamsTabView1");
    }
    
    /******************************* Parametros generales *************************************/
    /**
     * Insert en tabla de Parametros generales
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdParameter, 
     * @param psNomParameter,
     * @param psDescription,
     * @param psUsedBy,
     * @param psValueParameter,
     * @param psStatusTab
     * @return void
     */
    public void insertGeneralParameterModel(Integer piIdParameter, 
                                            String psNomParameter,
                                            String psDescription,
                                            String psUsedBy,
                                            String psValueParameter,
                                            String psStatusTab) {        
        EvetvIntConfigParamTabViewImpl    loObj = 
            getEvetvIntConfigParamTabView1();
        EvetvIntConfigParamTabViewRowImpl loNewRow = 
            (EvetvIntConfigParamTabViewRowImpl)loObj.createRow();        
        try {
            loNewRow.setIdParameter(piIdParameter);
            loNewRow.setNomParameter(psNomParameter);
            loNewRow.setIndDescParameter(psDescription);
            loNewRow.setIndUsedBy(psUsedBy);
            loNewRow.setIndValueParameter(psValueParameter);
            loNewRow.setIndEstatus(psStatusTab);           
            
            //Timestamp ltTimestamp = new Timestamp(System.currentTimeMillis());
            //String IDusername = getValueSessionFromAttribute("loggedIntegrationIdUser");
            //String username = getValueSessionFromAttribute("loggedIntegrationUser");
            
            loNewRow.setFecCreationDate(getCurrentTimestamp());
            loNewRow.setFecLastUpdateDate(getCurrentTimestamp());
            loNewRow.setAttribute15(getValueSessionFromAttribute("loggedIntegrationUser"));
            loNewRow.setNumCreatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Delete en tabla de Parametros generales
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdParameter     
     * @return void
     */
    public void deleteGeneralParameterModel(Integer piIdParameter) {      
        try {
            EvetvIntConfigParamTabViewImpl    loObj = 
                getEvetvIntConfigParamTabView1();
            loObj.setWhereClause("ID_PARAMETER = " + piIdParameter);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntConfigParamTabViewRowImpl loRowDelete = (EvetvIntConfigParamTabViewRowImpl)loRow;           
                    try{       
                        loRowDelete.remove();
                    }catch(Exception loExInt){
                        System.out.println("Delete interno ERROR!!"+loExInt.getMessage());
                    }                    
                }
            } 
        } catch (Exception loEx) {
            System.out.println("Delete ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
    }
    
    /**
     * Update en tabla de Parametros generales
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdParameter, 
     * @param psNomParameter,
     * @param psDescription,
     * @param psUsedBy,
     * @param psValueParameter,
     * @param psStatusTab
     * @return void
     */
    public void updateGeneralParameterModel(Integer piIdParameter, 
                                            String psNomParameter,
                                            String psDescription,
                                            String psUsedBy,
                                            String psValueParameter,
                                            String psStatusTab) {   
     
       try {
            EvetvIntConfigParamTabViewImpl    loObj = 
                getEvetvIntConfigParamTabView1();
            loObj.setWhereClause("ID_PARAMETER = " + piIdParameter);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntConfigParamTabViewRowImpl loUpdRow = 
                   (EvetvIntConfigParamTabViewRowImpl)loRow;     
               
               loUpdRow.setIdParameter(piIdParameter);
               loUpdRow.setNomParameter(psNomParameter);
               loUpdRow.setIndDescParameter(psDescription);
               loUpdRow.setIndUsedBy(psUsedBy);
               loUpdRow.setIndValueParameter(psValueParameter);
               loUpdRow.setIndEstatus(psStatusTab);
               loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
               loUpdRow.setAttribute14(getValueSessionFromAttribute("loggedIntegrationUser"));
               loUpdRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
               loUpdRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser"))); 
           }           
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }
    
    /**
     * Obtiene llave para codificacion y decodificacion del servicio</br>
     * de Autenticacon de Secman
     * @autor Jorge Luis Bautista Santiago  
     * @return String
     */
    public String getKeyDecoderUserFromDb(){
        String valor = "";
        EvetvIntConfigParamTabViewImpl u = getEvetvIntConfigParamTabView1();
        String where = "UPPER(NOM_PARAMETER) = 'KEY'";
        u.setWhereClause(where);
        u.setRangeSize(-1);
        u.executeQuery();
        Row[] au = u.getAllRowsInRange();
        if (au.length > 0) {
            Row row = au[0];
            EvetvIntConfigParamTabViewRowImpl r =
                (EvetvIntConfigParamTabViewRowImpl)row;
            valor = r.getIndValueParameter();
        }
        return valor;
    }
    
    /**
     * Obtiene Valore del parametro generalo</br>
     * en base al nombre del parametro
     * @autor Jorge Luis Bautista Santiago  
     * @return String
     */
    public String getParameterValue(String psNameParameter){
        String lsValue = "";
        EvetvIntConfigParamTabViewImpl loObject = getEvetvIntConfigParamTabView1();
        String lsWhere = "NOM_PARAMETER = '"+psNameParameter+"'";
        loObject.setWhereClause(lsWhere);
        
        loObject.setRangeSize(-1);
        loObject.executeQuery();
        Row[] laObjs = loObject.getAllRowsInRange();
        if (laObjs.length > 0) {
            Row loRow = laObjs[0];
            EvetvIntConfigParamTabViewRowImpl loPgen =
                (EvetvIntConfigParamTabViewRowImpl)loRow;
            lsValue = loPgen.getIndValueParameter();
        }
        return lsValue;
    }
    
    /**
     * Obtiene Valore del parametro generalo</br>
     * en base al nombre del parametro
     * @autor Jorge Luis Bautista Santiago  
     * @return String
     */
    public Integer getIdParameterValue(String psNameParameter){
        Integer lsValue = null;
        EvetvIntConfigParamTabViewImpl loObject = getEvetvIntConfigParamTabView1();
        String lsWhere = "UPPER(NOM_PARAMETER) = '"+psNameParameter.toUpperCase()+"'";
        loObject.setWhereClause(lsWhere);
        loObject.setRangeSize(-1);
        loObject.executeQuery();
        Row[] laObjs = loObject.getAllRowsInRange();
        if (laObjs.length > 0) {
            Row loRow = laObjs[0];
            EvetvIntConfigParamTabViewRowImpl loPgen =
                (EvetvIntConfigParamTabViewRowImpl)loRow;
            lsValue = loPgen.getIdParameter();
        }
        return lsValue;
    }
    
    
    /******************************* Notificaciones *************************************/
    
    /**
     * Insert en tabla de Configuracion de Notificaciones
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdNotification, 
     * @param piIdService,
     * @param piIdProcess,
     * @param psIdUsersGroup,
     * @param psSubject,
     * @param psMessage,
     * @param psStatusTab
     * @return void
     */
    public void insertNotificationsModel(Integer piIdNotification,
                                         Integer piIdService,
                                         Integer piIdProcess,   
                                         String psIdUsersGroup,
                                         String psSubject,
                                         String psMessage,
                                         String psStatusTab) {        
        EvetvIntNotificationsTabViewImpl    loObj = 
            getEvetvIntNotificationsTabView1();
        EvetvIntNotificationsTabViewRowImpl loNewRow = 
            (EvetvIntNotificationsTabViewRowImpl)loObj.createRow();        
        try {
            loNewRow.setIdNotification(piIdNotification);
            loNewRow.setIdService(piIdService);
            loNewRow.setIndProcess(piIdProcess);
            loNewRow.setIndUsersGroup(psIdUsersGroup);
            loNewRow.setIndSubject(psSubject);
            loNewRow.setIndMessage(psMessage);            
            loNewRow.setIndEstatus(psStatusTab);
            loNewRow.setFecCreationDate(getCurrentTimestamp());
            loNewRow.setFecLastUpdateDate(getCurrentTimestamp());
            loNewRow.setAttribute15(getValueSessionFromAttribute("loggedIntegrationUser"));
            loNewRow.setNumCreatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Delete en tabla de Notificaciones
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdNotification     
     * @return void
     */
    public void deleteNotificationsModel(Integer piIdNotification) {      
        try {
            EvetvIntNotificationsTabViewImpl    loObj = 
                getEvetvIntNotificationsTabView1();
            loObj.setWhereClause("ID_NOTIFICATION = " + piIdNotification);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntNotificationsTabViewRowImpl loRowDelete = (EvetvIntNotificationsTabViewRowImpl)loRow;           
                    try{       
                        loRowDelete.remove();
                    }catch(Exception loExInt){
                        System.out.println("Delete interno ERROR!!"+loExInt.getMessage());
                    }                    
                }
            } 
        } catch (Exception loEx) {
            System.out.println("Delete ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
    }
    
    /**
     * Update en tabla de Notificacion
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdNotification, 
     * @param piIdService,
     * @param piIdProcess,
     * @param psIdUsersGroup,
     * @param psSubject,
     * @param psMessage,
     * @param psStatusTab
     * @return void
     */
    public void updateNotificationsModel(Integer piIdNotification,
                                         Integer piIdService,
                                         Integer piIdProcess,   
                                         String psIdUsersGroup,
                                         String psSubject,
                                         String psMessage,
                                         String psStatusTab) {   
     
       try {
            EvetvIntNotificationsTabViewImpl    loObj = 
                getEvetvIntNotificationsTabView1();
            loObj.setWhereClause("ID_NOTIFICATION = " + piIdNotification);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntNotificationsTabViewRowImpl loUpdRow = 
                   (EvetvIntNotificationsTabViewRowImpl)loRow;     
               
               loUpdRow.setIdNotification(piIdNotification);
               loUpdRow.setIdService(piIdService);
               loUpdRow.setIndProcess(piIdProcess);
               loUpdRow.setIndUsersGroup(psIdUsersGroup);
               loUpdRow.setIndSubject(psSubject);
               loUpdRow.setIndMessage(psMessage);
               loUpdRow.setIndEstatus(psStatusTab);
               loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
               loUpdRow.setAttribute14(getValueSessionFromAttribute("loggedIntegrationUser"));
               loUpdRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
               loUpdRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser"))); 
           }           
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }
    
    /******************************* Configuracion de Servicios *************************************/
    
    /**
     * Insert en tabla de Configuracion de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService,
     * @param psNomService,
     * @param psIndServiceWsdl,
     * @param psIndSystem,
     * @param psIndOrigin,
     * @param psIndDestiny,
     * @param psStatusTab,
     * @param psAsynTab
     * @return void
     */
    public void insertServicesCatModel(Integer piIdService,
                                       String psNomService,
                                       String psDesService,
                                       String psIndServiceWsdl,
                                       String psIndSystem,
                                       String psIndOrigin,
                                       String psIndDestiny,
                                       String psStatusTab,
                                       String psAsynTab
                                      ) {        
        EvetvIntServicesCatTabViewImpl    loObj = 
            getEvetvIntServicesCatTabView1();
        
        EvetvIntServicesCatTabViewRowImpl loNewRow = 
            (EvetvIntServicesCatTabViewRowImpl)loObj.createRow();                       
        
        try {
            loNewRow.setIdService(piIdService);            
            loNewRow.setNomService(psNomService);
            loNewRow.setIndDescService(psDesService);
            loNewRow.setIndServiceWsdl(psIndServiceWsdl);            
            loNewRow.setIndSystem(psIndSystem);            
            loNewRow.setIndOrigin(psIndOrigin);            
            loNewRow.setIndDestiny(psIndDestiny);                        
            loNewRow.setIndEstatus(psStatusTab);
            loNewRow.setIndSynchronous(psAsynTab);            
            loNewRow.setFecCreationDate(getCurrentTimestamp());
            loNewRow.setFecLastUpdateDate(getCurrentTimestamp());
            loNewRow.setAttribute15(getValueSessionFromAttribute("loggedIntegrationUser"));
            loNewRow.setNumCreatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Delete en tabla de Catalogo de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService     
     * @return void
     */
    public void deleteServicesCatModel(Integer piIdService) {      
        try {
            EvetvIntServicesCatTabViewImpl    loObj = 
                getEvetvIntServicesCatTabView1();
            loObj.setWhereClause("ID_SERVICE = " + piIdService);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntServicesCatTabViewRowImpl loRowDelete = (EvetvIntServicesCatTabViewRowImpl)loRow;           
                    try{       
                        loRowDelete.remove();
                    }catch(Exception loExInt){
                        System.out.println("Delete interno ERROR!!"+loExInt.getMessage());
                    }                    
                }
            } 
        } catch (Exception loEx) {
            System.out.println("Delete ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
    }
    
    /**
     * Valida si un servicio ya existe en la tabla, por Id
     * @autor Jorge Luis Bautista Santiago  
     * @param psNomService     
     * @return void
     */
    public Integer validateExistByNomServicesCatModel(String psNomService) {      
        Integer liRes = 0;
        try {
            EvetvIntServicesCatTabViewImpl    loObj = 
                getEvetvIntServicesCatTabView1();
            loObj.setWhereClause("NOM_SERVICE = '" + psNomService+"'");
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();     
            System.out.println("Existencia["+laRows.length+"]");
            if (laRows.length > 0) {
                liRes = laRows.length;
            } 
        } catch (Exception loEx) {
            System.out.println("Select by Id ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
        return liRes;
    }
    
    /**
     * Update en tabla de Catalogos de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService, 
     * @param psNomService,
     * @param psIndServiceWsdl,
     * @param psIndSystem,
     * @param psIndOrigin,
     * @param psIndDestiny,
     * @param psStatusTab,
     * @param psAsynTab
     * @return void
     */
    public void updateServicesCatModel(Integer piIdService,
                                       String psNomService,
                                       String psDesService,
                                       String psIndServiceWsdl,
                                       String psIndSystem,
                                       String psIndOrigin,
                                       String psIndDestiny,
                                       String psStatusTab,
                                       String psAsynTab) {   
     
       try {
            EvetvIntServicesCatTabViewImpl    loObj = 
                getEvetvIntServicesCatTabView1();
            loObj.setWhereClause("ID_SERVICE = " + piIdService);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntServicesCatTabViewRowImpl loUpdRow = 
                   (EvetvIntServicesCatTabViewRowImpl)loRow;     
               
               loUpdRow.setIdService(piIdService);            
               loUpdRow.setNomService(psNomService);
               loUpdRow.setIndDescService(psDesService);
               loUpdRow.setIndServiceWsdl(psIndServiceWsdl);            
               loUpdRow.setIndSystem(psIndSystem);            
               loUpdRow.setIndOrigin(psIndOrigin);            
               loUpdRow.setIndDestiny(psIndDestiny);                        
               loUpdRow.setIndEstatus(psStatusTab);
               loUpdRow.setIndSynchronous(psAsynTab);   
               loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
               loUpdRow.setAttribute14(getValueSessionFromAttribute("loggedIntegrationUser"));
               loUpdRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
               loUpdRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser"))); 
           }           
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }
    
    /******************************* Configuracion de Parametros de Servicios *************************************/
    
    /**
     * Insert en tabla de Configuracion de Parametros Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService, 
     * @param psParameter,
     * @param psValParameter,
     * @param psStatusTab
     * @return void
     */
    public void insertServicesParamsModel(Integer piIdService,
                                       String psParameter,
                                       String psValParameter,                                      
                                       String psStatusTab
                                      ) {        
        EvetvIntServicesParamsTabViewImpl    loObj = 
            getEvetvIntServicesParamsTabView1();
        
        EvetvIntServicesParamsTabViewRowImpl loNewRow = 
            (EvetvIntServicesParamsTabViewRowImpl)loObj.createRow();        
        try {
            loNewRow.setIdService(piIdService);            
            loNewRow.setIndParameter(psParameter);         
            loNewRow.setIndValParameter(psValParameter);         
            loNewRow.setIndEstatus(psStatusTab);         
            loNewRow.setFecCreationDate(getCurrentTimestamp());
            loNewRow.setFecLastUpdateDate(getCurrentTimestamp());
            loNewRow.setAttribute15(getValueSessionFromAttribute("loggedIntegrationUser"));
            loNewRow.setNumCreatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Delete en tabla de Configuracion de Parametros Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService     
     * @param psParameter
     * @param psValParameter
     * @return void
     */
    public void deleteServicesParamsModel(Integer piIdService,
                                          String psParameter,
                                          String psValParameter
                                          ) {      
        try {
            EvetvIntServicesParamsTabViewImpl    loObj = 
                getEvetvIntServicesParamsTabView1();
            String lsWhere = "ID_SERVICE = " + piIdService+
                " AND IND_PARAMETER = '"+psParameter+"' "+
                " AND IND_VAL_PARAMETER = '"+psValParameter+"'";
            loObj.setWhereClause(lsWhere);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntServicesParamsTabViewRowImpl loRowDelete = (EvetvIntServicesParamsTabViewRowImpl)loRow;           
                    try{       
                        loRowDelete.remove();
                    }catch(Exception loExInt){
                        System.out.println("Delete interno ERROR!!"+loExInt.getMessage());
                    }                    
                }
            } 
        } catch (Exception loEx) {
            System.out.println("Delete ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
    }
    
    /**
     * Update en tabla de Parametros de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param tiIdService, 
     * @param psNomService,
     * @param psIndServiceWsdl,
     * @param psIndSystem,
     * @param psIndOrigin,
     * @param psIndDestiny,
     * @param tsStatusTab,
     * @param psAsynTab
     * @return void
     */
    public void updateServicesParamsModel(Integer tiIdService,
                                          String tsParameter,
                                          String tsValParameter,
                                          String tsStatusTab,
                                          String tsParameterKey,
                                          String tsValParameterKey
                                          ) {   
     
       try {
            EvetvIntServicesParamsTabViewImpl    loObj = 
                getEvetvIntServicesParamsTabView1();
           String lsQry = "ID_SERVICE = " + tiIdService+ 
                          " AND IND_PARAMETER = '" + tsParameterKey + "' " +
               " AND IND_VAL_PARAMETER = '" + tsValParameterKey + "'";
            loObj.setWhereClause(lsQry);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntServicesParamsTabViewRowImpl loUpdRow = 
                   (EvetvIntServicesParamsTabViewRowImpl)loRow;     
               
               loUpdRow.setIdService(tiIdService);            
               loUpdRow.setIndParameter(tsParameter);         
               loUpdRow.setIndValParameter(tsValParameter);                             
               loUpdRow.setIndEstatus(tsStatusTab);
               loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
               loUpdRow.setAttribute14(getValueSessionFromAttribute("loggedIntegrationUser"));
               loUpdRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
               loUpdRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser"))); 
           }           
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }
    
    /**
     * Obtiene los parametros del servicio
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService
     * @return void
     */
    public List<EvetvIntServicesParamTabBean> getParametersServices(Integer piIdService) {   
        List<EvetvIntServicesParamTabBean> laListReturn = 
            new ArrayList<EvetvIntServicesParamTabBean>();
       try {
            EvetvIntServicesParamsTabViewImpl    loObj = 
                getEvetvIntServicesParamsTabView1();
            loObj.setWhereClause("ID_SERVICE = " + piIdService);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
               for(Row loRow : laRows){
                   EvetvIntServicesParamsTabViewRowImpl loRowTbl = 
                       (EvetvIntServicesParamsTabViewRowImpl)loRow;   
                   EvetvIntServicesParamTabBean loParam = new EvetvIntServicesParamTabBean();
                   loParam.setLsIdService(String.valueOf(loRowTbl.getIdService()));
                   loParam.setIndParameter(loRowTbl.getIndParameter());
                   loParam.setIndValParameter(loRowTbl.getIndValParameter());
                   laListReturn.add(loParam);
               }               
           }           
        } catch (Exception loEx) {
            System.out.println("getParametersServices ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
       return laListReturn;
    }

    

    /**
     * Container's getter for EvetvIntServicesParamsTblVwView1.
     * @return EvetvIntServicesParamsTblVwView1
     */
    public ViewObjectImpl getEvetvIntServicesParamsTblVwView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntServicesParamsTblVwView1");
    }


    /**
     * Container's getter for EvetvIntNotificationsTblVwView1.
     * @return EvetvIntNotificationsTblVwView1
     */
    public ViewObjectImpl getEvetvIntNotificationsTblVwView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntNotificationsTblVwView1");
    }

    /**
     * Container's getter for EvetvIntServicesLogTabView1.
     * @return EvetvIntServicesLogTabView1
     */
    public EvetvIntServicesLogTabViewImpl getEvetvIntServicesLogTabView1() {
        return (EvetvIntServicesLogTabViewImpl) findViewObject("EvetvIntServicesLogTabView1");
    }

    /**
     * Container's getter for EvetvIntCronConfigTab1View1.
     * @return EvetvIntCronConfigTab1View1
     */
    public ViewObjectImpl getEvetvIntCronConfigTab1View1() {
        return (ViewObjectImpl) findViewObject("EvetvIntCronConfigTab1View1");
    }
    
    /******************************* Configuracion de CRON *************************************/
    /**
     * Insert en tabla de Cron Config
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdConfiguration, 
     * @param piIdService,
     * @param psIndPeriodicity,
     * @param psIndBeginSchedule,
     * @param psIndTypeSchedule,
     * @param piIndDayMonth
     * @param piIndWeekMonth
     * @param psIndCronExpression
     * @param piIndMonday
     * @param piIndTuesday
     * @param piIndWednesday
     * @param piIndThursday
     * @param piIndFriday
     * @param piIndSaturday
     * @param piIndSunday
     * @param psStatusTab
     * @return void
     */
    public void insertCronConfigModel(Integer piIdConfiguration,
                                    Integer piIdService,
                                    String psIndPeriodicity,
                                    String psIndBeginSchedule,
                                    String psIndTypeSchedule,  
                                    String psIndValTypeSchedule,
                                    Integer piIndDayMonth,
                                    Integer piIndWeekMonth,
                                    String psIndCronExpression,            
                                    Integer piIndMonday,
                                    Integer piIndTuesday,
                                    Integer piIndWednesday,
                                    Integer piIndThursday,
                                    Integer piIndFriday,
                                    Integer piIndSaturday,
                                    Integer piIndSunday,
                                    String psStatusTab,
                                    String psRestReqCron,
                                    String tsHourDeadLine,
                                    String tsMinuteDeadLine
                                    ) {        
        EvetvIntCronConfigTabViewImpl    loObj = 
            getEvetvIntCronConfigTabView1();
        EvetvIntCronConfigTabViewRowImpl loNewRow = 
            (EvetvIntCronConfigTabViewRowImpl)loObj.createRow();        
        try {
            loNewRow.setIdConfiguration(piIdConfiguration);
            loNewRow.setIdService(piIdService);            
            loNewRow.setIndPeriodicity(psIndPeriodicity);
            loNewRow.setIndBeginSchedule(psIndBeginSchedule);
            loNewRow.setIndTypeSchedule(psIndTypeSchedule);
            loNewRow.setIndValTypeSchedule(psIndValTypeSchedule);
            
            loNewRow.setIndDayMonth(piIndDayMonth);
            loNewRow.setIndWeekMonth(piIndWeekMonth);
            loNewRow.setIndCronExpression(psIndCronExpression);
            
            loNewRow.setIndMonday(piIndMonday);
            loNewRow.setIndTuesday(piIndTuesday);
            loNewRow.setIndWednesday(piIndWednesday);
            loNewRow.setIndThursday(piIndThursday);
            loNewRow.setIndFriday(piIndFriday);
            loNewRow.setIndSaturday(piIndSaturday);
            loNewRow.setIndSunday(piIndSunday);
            
            loNewRow.setIndEstatus(psStatusTab);            
            loNewRow.setFecCreationDate(getCurrentTimestamp());
            loNewRow.setFecLastUpdateDate(getCurrentTimestamp());            
            loNewRow.setAttribute13(psRestReqCron);
            if(tsHourDeadLine != null && tsMinuteDeadLine != null){
                loNewRow.setAttribute1(tsHourDeadLine+":"+tsMinuteDeadLine);
            }
            loNewRow.setAttribute15(getValueSessionFromAttribute("loggedIntegrationUser"));
            loNewRow.setNumCreatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loNewRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Delete en tabla de Configuracion de Cron
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdCronConfig
     * @return void
     */
    public void deleteCronConfigModel(Integer piIdCronConfig
                                    ) {      
        try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            String lsWhere = "ID_CONFIGURATION = " + piIdCronConfig;
            loObj.setWhereClause(lsWhere);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntCronConfigTabViewRowImpl loRowDelete = (EvetvIntCronConfigTabViewRowImpl)loRow;           
                    try{       
                        loRowDelete.remove();
                    }catch(Exception loExInt){
                        System.out.println("Delete interno ERROR!!"+loExInt.getMessage());
                    }                    
                }
            } 
        } catch (Exception loEx) {
            System.out.println("Delete ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
    }
    
    /**
     * Obtiene el cron expression en tabla de Configuracion de Cron
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService
     * @return String 
     */
    public String getCronExpressionModel(Integer piIdService) {      
        String lsResponse = null;
        try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            String lsWhere = "ID_SERVICE = " + piIdService;
            loObj.setWhereClause(lsWhere);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntCronConfigTabViewRowImpl loRowCron = (EvetvIntCronConfigTabViewRowImpl)loRow;           
                    try{       
                        lsResponse = loRowCron.getIndCronExpression();
                    }catch(Exception loExInt){
                        System.out.println("Obtener cron expression ERROR!!"+loExInt.getMessage());
                    }                    
                }
            } 
        } catch (Exception loEx) {
            System.out.println("getCronExpression ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
        return lsResponse;
    }
    
    /**
     * Update en tabla de Cron Config
     * @autor Jorge Luis Bautista Santiago  
     * @param tiIdConfiguration, 
     * @param tiIdService,
     * @param tsIndPeriodicity,
     * @param tsIndBeginSchedule,
     * @param tsIndTypeSchedule,
     * @param tiIndDayMonth
     * @param tiIndWeekMonth
     * @param tsIndCronExpression
     * @param tiIndMonday
     * @param tiIndTuesday
     * @param tiIndWednesday
     * @param tiIndThursday
     * @param tiIndFriday
     * @param tiIndSaturday
     * @param tiIndSunday
     * @param tsStatusTab
     * @return void
     */
    public void updateCronConfigModel(Integer tiIdConfiguration,
                                        Integer tiIdService,
                                        String tsIndPeriodicity,
                                        String tsIndBeginSchedule,
                                        String tsIndTypeSchedule,            
                                        String tsIndValTypeSchedule,
                                        Integer tiIndDayMonth,
                                        Integer tiIndWeekMonth,
                                        String tsIndCronExpression,            
                                        Integer tiIndMonday,
                                        Integer tiIndTuesday,
                                        Integer tiIndWednesday,
                                        Integer tiIndThursday,
                                        Integer tiIndFriday,
                                        Integer tiIndSaturday,
                                        Integer tiIndSunday,
                                        String tsStatusTab,
                                        String tsRestReqCron,
                                        String tsHourDeadLine,
                                        String tsMinuteDeadLine
                                    ) {   
     
       try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            loObj.setWhereClause("ID_CONFIGURATION = " + tiIdConfiguration);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntCronConfigTabViewRowImpl loUpdRow = 
                   (EvetvIntCronConfigTabViewRowImpl)loRow;     
               
               loUpdRow.setIdService(tiIdService);            
               loUpdRow.setIndPeriodicity(tsIndPeriodicity);
               loUpdRow.setIndBeginSchedule(tsIndBeginSchedule);
               loUpdRow.setIndTypeSchedule(tsIndTypeSchedule);               
               loUpdRow.setIndValTypeSchedule(tsIndValTypeSchedule);               
               loUpdRow.setIndDayMonth(tiIndDayMonth);
               loUpdRow.setIndWeekMonth(tiIndWeekMonth);
               loUpdRow.setIndCronExpression(tsIndCronExpression);
               loUpdRow.setIndMonday(tiIndMonday);
               loUpdRow.setIndTuesday(tiIndTuesday);
               loUpdRow.setIndWednesday(tiIndWednesday);
               loUpdRow.setIndThursday(tiIndThursday);
               loUpdRow.setIndFriday(tiIndFriday);
               loUpdRow.setIndSaturday(tiIndSaturday);
               loUpdRow.setIndSunday(tiIndSunday);                             
               //loUpdRow.setIndEstatus(tsStatusTab);
               loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
               loUpdRow.setAttribute13(tsRestReqCron);
               if(tsHourDeadLine != null && tsMinuteDeadLine != null){
                   loUpdRow.setAttribute1(tsHourDeadLine+":"+tsMinuteDeadLine);
               }               
               loUpdRow.setAttribute14(getValueSessionFromAttribute("loggedIntegrationUser"));
               loUpdRow.setNumLastUpdateLogin(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")));
               loUpdRow.setNumLastUpdatedBy(Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser"))); 
           }           
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }
    
    /**
     * Update en tabla de Cron Config
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService,
     * @param psStatusTab
     * @return void
     */
    public void updateStatusCronConfigModel(Integer piIdService,
                                            String psStatusTab,
                                            String psUserName,
                                            String psIdUser,
                                            String psStatCron
                                           ) {   
     
       try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            loObj.setWhereClause("ID_SERVICE = " + piIdService);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntCronConfigTabViewRowImpl loUpdRow = 
                   (EvetvIntCronConfigTabViewRowImpl)loRow;                    
               loUpdRow.setIdService(piIdService);            
               loUpdRow.setIndEstatus(psStatusTab);
               loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
               String lsUserName = psUserName == null ? 
                   getValueSessionFromAttribute("loggedIntegrationUser") : psUserName;
               String lsIdUser = psIdUser == null ? 
                   getValueSessionFromAttribute("loggedIntegrationIdUser") : psIdUser;
               loUpdRow.setAttribute14(lsUserName);
               loUpdRow.setNumLastUpdateLogin(Integer.parseInt(lsIdUser));
               loUpdRow.setNumLastUpdatedBy(Integer.parseInt(lsIdUser)); 
               loUpdRow.setAttribute12(psStatCron);
           }           
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }

    
    /**
     * buscar en tabla de Configuracion de Cron si ya existe un servicio
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService
     * @return void
     */
    public Integer searchCronConfigModel(Integer piIdService) {   
        Integer liResponse = 0;
        try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            String lsWhere = "ID_SERVICE = " + piIdService;
            loObj.setWhereClause(lsWhere);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                liResponse = 1;
            } 
        } catch (Exception loEx) {
            System.out.println("Delete ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
        return liResponse;
    }
    
    /**
     * buscar en tabla de Configuracion de Cron si ya existe un servicio
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService
     * @return void
     */
    public Integer searchIdCronConfigModel(Integer piIdService) {   
        Integer liResponse = 0;
        try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            String lsWhere = "ID_SERVICE = " + piIdService;
            loObj.setWhereClause(lsWhere);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();            
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){
                    Row loRow = laRows[liI];
                    EvetvIntCronConfigTabViewRowImpl loRowFound = (EvetvIntCronConfigTabViewRowImpl)loRow;           
                    liResponse = loRowFound.getIdConfiguration();                       
                }                
            } 
        } catch (Exception loEx) {
            System.out.println("search ERROR!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }  
        return liResponse;
    }
    
    /**
     * Obtiene Row de tabla de Cron Config
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdCronConfig, 
     * @return EvetvIntCronConfigTabRowBean
     */
    public EvetvIntCronConfigTabRowBean getRowCronConfigModel(Integer piIdCronConfig) {   
        EvetvIntCronConfigTabRowBean loRowResponse = new EvetvIntCronConfigTabRowBean();     
       try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            loObj.setWhereClause("ID_CONFIGURATION = " + piIdCronConfig);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntCronConfigTabViewRowImpl loRowView = 
                   (EvetvIntCronConfigTabViewRowImpl)loRow;     
               System.out.println("Cron config obtenido");
               loRowResponse.setIdService(loRowView.getIdService());
               loRowResponse.setIndPeriodicity(loRowView.getIndPeriodicity());
               loRowResponse.setIndBeginSchedule(loRowView.getIndBeginSchedule());
               loRowResponse.setIndTypeSchedule(loRowView.getIndTypeSchedule());
               loRowResponse.setIndValTypeSchedule(loRowView.getIndValTypeSchedule());
               loRowResponse.setIndDayMonth(loRowView.getIndDayMonth());
               loRowResponse.setIndWeekMonth(loRowView.getIndWeekMonth());
               loRowResponse.setIndCronExpression(loRowView.getIndCronExpression());
               loRowResponse.setIndMonday(loRowView.getIndMonday());
               loRowResponse.setIndTuesday(loRowView.getIndTuesday());
               loRowResponse.setIndWednesday(loRowView.getIndWednesday());
               loRowResponse.setIndThursday(loRowView.getIndThursday());
               loRowResponse.setIndFriday(loRowView.getIndFriday());
               loRowResponse.setIndSaturday(loRowView.getIndSaturday());
               loRowResponse.setIndSunday(loRowView.getIndSunday());
               loRowResponse.setIndEstatus(loRowView.getIndEstatus());
               loRowResponse.setAttribute14(loRowView.getAttribute14());
               loRowResponse.setAttribute1(loRowView.getAttribute1());
               
           }else{
               loRowResponse = null;
           }
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
            loRowResponse = null;
        }finally{                        
            getDBTransaction().commit();    
        }   
       return loRowResponse;
    }
    
    /**
     * Obtiene Row de tabla de Cron Config
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService, 
     * @return EvetvIntCronConfigTabRowBean
     */
    public EvetvIntCronConfigTabRowBean getRowCronConfigByServiceModel(Integer piIdService) {   
        EvetvIntCronConfigTabRowBean loRowResponse = new EvetvIntCronConfigTabRowBean();     
       try {
            EvetvIntCronConfigTabViewImpl    loObj = 
                getEvetvIntCronConfigTabView1();
            loObj.setWhereClause("ID_SERVICE = " + piIdService);
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = loObj.getAllRowsInRange()[0];
               EvetvIntCronConfigTabViewRowImpl loRowView = 
                   (EvetvIntCronConfigTabViewRowImpl)loRow;     
               loRowResponse.setIdService(loRowView.getIdService());
               loRowResponse.setIndPeriodicity(loRowView.getIndPeriodicity());
               loRowResponse.setIndBeginSchedule(loRowView.getIndBeginSchedule());
               loRowResponse.setIndTypeSchedule(loRowView.getIndTypeSchedule());
               loRowResponse.setIndValTypeSchedule(loRowView.getIndValTypeSchedule());
               loRowResponse.setIndDayMonth(loRowView.getIndDayMonth());
               loRowResponse.setIndWeekMonth(loRowView.getIndWeekMonth());
               loRowResponse.setIndCronExpression(loRowView.getIndCronExpression());
               loRowResponse.setIndMonday(loRowView.getIndMonday());
               loRowResponse.setIndTuesday(loRowView.getIndTuesday());
               loRowResponse.setIndWednesday(loRowView.getIndWednesday());
               loRowResponse.setIndThursday(loRowView.getIndThursday());
               loRowResponse.setIndFriday(loRowView.getIndFriday());
               loRowResponse.setIndSaturday(loRowView.getIndSaturday());
               loRowResponse.setIndSunday(loRowView.getIndSunday());
               loRowResponse.setIndEstatus(loRowView.getIndEstatus());
               loRowResponse.setAttribute14(loRowView.getAttribute14());
               loRowResponse.setAttribute15(loRowView.getAttribute15());
               loRowResponse.setAttribute1(loRowView.getAttribute1());
               
           }else{
               loRowResponse = null;
           }
        } catch (Exception loEx) {
            System.out.println("Update ERROR!!"+loEx.getMessage());
            loRowResponse = null;
        }finally{                        
            getDBTransaction().commit();    
        }   
       return loRowResponse;
    }
    
    /******************************* Log de Servicios *************************************/
    /**
     * Insert en tabla de LOG de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdLogServices, 
     * @param piIdService,
     * @param piIndProcess,
     * @param psIndResponse,
     * @param piNumUser,
     * @param piNumEvtbProcessId,
     * @param piNumPgmProcessID,
     * @param psProceso
     * @return void
     */
    public void insertServicesLogModel(Integer piIdLogServices, 
                                       Integer piIdService,
                                       Integer piIndProcess,
                                       String psIndResponse,
                                       Integer piNumEvtbProcessId,
                                       Integer piNumPgmProcessID,
                                       String psProceso,
                                       Integer piIdUser,
                                       String psUserName,
                                       String psServiceType) {   
       
        
        EvetvIntServicesLogTabViewImpl    loObj = 
            getEvetvIntServicesLogTabView1();
        EvetvIntServicesLogTabViewRowImpl loNewRow = 
            (EvetvIntServicesLogTabViewRowImpl)loObj.createRow();        
        try {
            loNewRow.setIdLogServices(piIdLogServices);
            loNewRow.setIdService(piIdService);
            loNewRow.setIndProcess(piIndProcess);
            loNewRow.setIndResponse(psIndResponse);
            loNewRow.setNumUser(piIdUser);
            loNewRow.setNumEvtbProcessId(piNumEvtbProcessId);
            loNewRow.setNumPgmProcessId(piNumPgmProcessID);            
            loNewRow.setFecRequest(new Timestamp(System.currentTimeMillis()));            
            loNewRow.setIndEstatus("1");            
            loNewRow.setFecCreationDate(new Timestamp(System.currentTimeMillis()));
            loNewRow.setFecLastUpdateDate(new Timestamp(System.currentTimeMillis()));
            loNewRow.setAttribute9(psServiceType);
            loNewRow.setAttribute10(psProceso);
            loNewRow.setAttribute15(psUserName);
            loNewRow.setNumCreatedBy(piIdUser);
            loNewRow.setNumLastUpdateLogin(piIdUser);
            loNewRow.setNumLastUpdatedBy(piIdUser);
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR insertServicesLogModel !!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Insert en tabla de LOG de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdLogServices, 
     * @param piIdService,
     * @param piIndProcess,
     * @param psIndResponse,
     * @param piNumUser,
     * @param piNumEvtbProcessId,
     * @param piNumPgmProcessID,
     * @param psProceso
     * @return void
     */
    public void updateServicesLogModel(Integer piIdLogServices, 
                                       Integer piIdService,
                                       Integer piIndProcess,
                                       String psIndResponse,
                                       Integer piNumEvtbProcessId,
                                       Integer piNumPgmProcessID,
                                       String psProceso,
                                       Integer piIdUser,
                                       String psUserName) {   
     
       try {
            EvetvIntServicesLogTabViewImpl    loObj = 
                getEvetvIntServicesLogTabView1();
            loObj.setWhereClause("ID_LOG_SERVICES = " + piIdLogServices + " AND ID_SERVICE = " + piIdService);
            loObj.setRangeSize(-1);
            loObj.executeQuery();            
            Row[] laRows = loObj.getAllRowsInRange();    
            if (laRows.length > 0) {
                for(int liI = 0; liI < laRows.length; liI++){                                
                    Row loRow = laRows[liI];
                    EvetvIntServicesLogTabViewRowImpl loUpdRow = (EvetvIntServicesLogTabViewRowImpl)loRow;     
                   //loUpdRow.setIdService(piIdService);
                   //loUpdRow.setIndProcess(piIndProcess);
                   //loUpdRow.setIndResponse(psIndResponse);
                   //loUpdRow.setNumUser(piIdUser);
                   loUpdRow.setNumEvtbProcessId(piNumEvtbProcessId);
                   //loUpdRow.setNumPgmProcessId(piNumPgmProcessID);               
                   loUpdRow.setFecResponse(getCurrentTimestamp());
                   loUpdRow.setFecLastUpdateDate(getCurrentTimestamp());
                   loUpdRow.setAttribute11(psProceso);
                   loUpdRow.setAttribute14(psUserName);
                   loUpdRow.setNumLastUpdateLogin(piIdUser);
                   loUpdRow.setNumLastUpdatedBy(piIdUser); 
                }
           }else{
               System.out.println("No se encontro registro para actualizar");
           }
        } catch (Exception loEx) {
            System.out.println("Update ERROR updateServicesLogModel!!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }   
    }

    /**
     * Container's getter for EvetvIntServiceBitacoraTabView1.
     * @return EvetvIntServiceBitacoraTabView1
     */
    public ViewObjectImpl getEvetvIntServiceBitacoraTabView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntServiceBitacoraTabView1");
    }
    
    /******************************* Bitacora de Servicios *************************************/
    /**
     * Insert en tabla de LOG de Servicios
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdBitacora
     * @param piIdLogServices
     * @param piIdService
     * @param piIndProcess
     * @param psIndResponse
     * @param piNumUser
     * @param piNumEvtbProcessId
     * @param piNumPgmProcessID
     * @param psProceso
     * @return void
     */
    public void insertServiceBitacoraModel(Integer piIdLogServices,
                                           Integer piIdService,
                                           Integer piIndProcess,
                                           String psIndEvento,
                                           Integer piNumEvtbProcessId,
                                           Integer piNumPgmProcessID,
                                           Integer piIdUser,
                                           String psUserName) {   
       
        EvetvIntServiceBitacoraTabViewImpl    loObj = 
            (EvetvIntServiceBitacoraTabViewImpl)getEvetvIntServiceBitacoraTabView1();
        
        EvetvIntServiceBitacoraTabViewRowImpl loNewRow = 
            (EvetvIntServiceBitacoraTabViewRowImpl)loObj.createRow();        
        try {
            Integer lsIdUser = piIdUser == null ? 
                Integer.parseInt(getValueSessionFromAttribute("loggedIntegrationIdUser")) : 
                piIdUser;
            String lsUserName = psUserName == null ? 
                getValueSessionFromAttribute("loggedIntegrationUser") : 
                psUserName;
            loNewRow.setIdBitacora(getIdBitacora());
            loNewRow.setIdLogServices(piIdLogServices);
            loNewRow.setIdService(piIdService);
            loNewRow.setIndProcess(piIndProcess);
            loNewRow.setNumEvtbProcessId(piNumEvtbProcessId);
            loNewRow.setNumPgmProcessId(piNumPgmProcessID);
            loNewRow.setIndEvento(psIndEvento);
            loNewRow.setIndEstatus("1");            
            loNewRow.setFecCreationDate(new Timestamp(System.currentTimeMillis()));
            loNewRow.setFecLastUpdateDate(new Timestamp(System.currentTimeMillis()));
            loNewRow.setAttribute15(lsUserName);
            loNewRow.setNumCreatedBy(lsIdUser);
            loNewRow.setNumLastUpdateLogin(lsIdUser);
            loNewRow.setNumLastUpdatedBy(lsIdUser);
            loObj.insertRow(loNewRow);          
        } catch (Exception loEx) {
            System.out.println("Insert ERROR insertBitacoraLogModel !!"+loEx.getMessage());
        }finally{                        
            getDBTransaction().commit();    
        }           
    }
    
    /**
     * Obtiene, en base a la fecha, el id_paradigm a manejar en intergracion
     * @autor Jorge Luis Bautista Santiago     
     * @return String
     */
    public String getIdBitacora(){
        String lsResponse = null;
        //SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        DateFormat loDf = new SimpleDateFormat("yyyyMMddHHmmssSSS");
        lsResponse = loDf.format(new java.util.Date(System.currentTimeMillis()));
        return lsResponse;
    }

    /**
     * Container's getter for EvetvIntServicesBitacoraVwView1.
     * @return EvetvIntServicesBitacoraVwView1
     */
    public ViewObjectImpl getEvetvIntServicesBitacoraVwView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntServicesBitacoraVwView1");
    }

    /**
     * Container's getter for EvetvIntRstLogCertTabView1.
     * @return EvetvIntRstLogCertTabView1
     */
    public ViewObjectImpl getEvetvIntRstLogCertTabView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntRstLogCertTabView1");
    }

    /**
     * Container's getter for EvetvIntRstParrillasTabView1.
     * @return EvetvIntRstParrillasTabView1
     */
    public ViewObjectImpl getEvetvIntRstParrillasTabView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntRstParrillasTabView1");
    }

    /**
     * Container's getter for EvetvIntRstProgramasTabView1.
     * @return EvetvIntRstProgramasTabView1
     */
    public ViewObjectImpl getEvetvIntRstProgramasTabView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntRstProgramasTabView1");
    }

    /**
     * Container's getter for EvetvIntRstVtradicionalTabView1.
     * @return EvetvIntRstVtradicionalTabView1
     */
    public ViewObjectImpl getEvetvIntRstVtradicionalTabView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntRstVtradicionalTabView1");
    }

    /**
     * Container's getter for EvetvIntRequestsTabView1.
     * @return EvetvIntRequestsTabView1
     */
    public ViewObjectImpl getEvetvIntRequestsTabView1() {
        return (ViewObjectImpl) findViewObject("EvetvIntRequestsTabView1");
    }

    /**
     * Container's getter for EvetvIntXmlFilesTabView1.
     * @return EvetvIntXmlFilesTabView1
     */
    public EvetvIntXmlFilesTabViewImpl getEvetvIntXmlFilesTabView1() {
        return (EvetvIntXmlFilesTabViewImpl) findViewObject("EvetvIntXmlFilesTabView1");
    }
    
    /**
     * Obtiene Row de tabla de Cron Config
     * @autor Jorge Luis Bautista Santiago  
     * @param piIdService, 
     * @return EvetvIntCronConfigTabRowBean
     */
    public EvetvIntXmlFilesRowBean getRowXmlFilesModel(Integer tiIdRequest, 
                                                       Integer piIdService,
                                                       String lsType) {   
        EvetvIntXmlFilesRowBean loRowResponse = new EvetvIntXmlFilesRowBean();     
       try {
            EvetvIntXmlFilesTabViewImpl    loObj = 
                getEvetvIntXmlFilesTabView1();
            String lsWhere = "ID_REQUEST = " + tiIdRequest + 
                            " AND ID_SERVICE = " + piIdService + 
                            " AND IND_FILE_TYPE = '"+lsType+"'";
            loObj.setWhereClause(lsWhere);                      
            //System.out.println(loObj.getQuery());
            loObj.setRangeSize(-1);
            loObj.executeQuery();         
            Row[] laRows = loObj.getAllRowsInRange();     
           if (laRows.length > 0) {
                Row loRow = laRows[0];
               EvetvIntXmlFilesTabViewRowImpl loRowView = 
                   (EvetvIntXmlFilesTabViewRowImpl)loRow;     
               loRowResponse.setLiIdFileXml(loRowView.getIdFileXml());
               loRowResponse.setLiIdRequest(loRowView.getIdRequest());
               loRowResponse.setLiIdService(loRowView.getIdService());
               loRowResponse.setLsIndServiceType(loRowView.getIndServiceType());
               loRowResponse.setLsIndEstatus(loRowView.getIndEstatus());
               loRowResponse.setLsFecCreationDate(loRowView.getFecCreationDate());
               loRowResponse.setLsNomFile(loRowView.getNomFile());
               loRowResponse.setLsNomUserName(loRowView.getNomUserName());
               //loRowResponse.setLoIndFileStream(loRowView.getIndFileStream());
           }else{
               System.out.println("blob no encontrado!!");
               loRowResponse.setLiIdFileXml(0);
               loRowResponse.setLiIdRequest(0);
               loRowResponse.setLiIdService(0);
               loRowResponse.setLsIndServiceType("Error");
               loRowResponse.setLsIndEstatus("E");               
               loRowResponse.setLsNomFile("Error");
               loRowResponse.setLsNomUserName("Error");
           }
        } catch (Exception loEx) {
            System.out.println("blob found ERROR!!"+loEx.getMessage());
            loRowResponse = null;
        }finally{                        
            getDBTransaction().commit();    
        }   
       return loRowResponse;
    }
    
    /**
     * Obtiene Valore del parametro generalo</br>
     * en base al nombre del parametro
     * @autor Jorge Luis Bautista Santiago  
     * @return String
     */
    public Blob getBlobFileXml(String tsIdRequest, 
                               String tsIdService, 
                               String tsFileType
                               ){
        Blob lsValue = null;
        try{
            EvetvIntXmlFilesTabViewImpl loObject = getEvetvIntXmlFilesTabView1();
            //String lsWhere = "ID_FILE_XML = 203";//+tsIdService+"";
            String lsWhere = "ID_REQUEST = " + tsIdRequest + 
                             " AND ID_SERVICE = "+tsIdService+
                             " AND IND_FILE_TYPE = '" + tsFileType + "'";
            loObject.setWhereClause(lsWhere);
            //System.out.println(loObject.getQuery());
            loObject.setRangeSize(-1);
            loObject.executeQuery();
            Row[] laObjs = loObject.getAllRowsInRange();
            if (laObjs.length > 0) {
                Row loRow = laObjs[0];
                EvetvIntXmlFilesTabViewRowImpl loPgen =
                    (EvetvIntXmlFilesTabViewRowImpl)loRow;
                lsValue = loPgen.getIndFileStream();
            }else{
                System.out.println("blob 2 no encontrado!!");
            }
        }catch(Exception loEx){
            System.out.println("blob 2 found ERROR!!"+loEx.getMessage());
        }
        return lsValue;
    }
    
    /**
     * Obtiene Valore del parametro generalo</br>
     * en base al nombre del parametro
     * @autor Jorge Luis Bautista Santiago  
     * @return String
     */
    public Blob getBlobFile(Integer tiIdRequest, 
                            Integer piIdService,
                            String lsType){
        Blob lsValue = null;
        EvetvIntXmlFilesTabViewImpl    loObject = 
            getEvetvIntXmlFilesTabView1();
        String lsWhere = "ID_REQUEST = " + tiIdRequest +
                        " AND ID_SERVICE = " + piIdService + 
                        " AND IND_FILE_TYPE = '"+lsType+"'";
        loObject.setWhereClause(lsWhere);
        loObject.setRangeSize(-1);
        loObject.executeQuery();
        Row[] laObjs = loObject.getAllRowsInRange();
        if (laObjs.length > 0) {
            Row loRow = laObjs[0];
            EvetvIntXmlFilesTabViewRowImpl loPgen =
                (EvetvIntXmlFilesTabViewRowImpl)loRow;
            lsValue = loPgen.getIndFileStream();
        }
        return lsValue;
    }
    
}

